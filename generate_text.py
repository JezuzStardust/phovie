"""This module creates a collection with curve objects that are generated from
output of a LaTeX-command or text. 

Typical usage: 
    generate_text_collection(r'\frac{a}{b} \int_0^\infty dx f(x)')
    
Results: 
    Produces a collection with the curve objects. 
"""

import bpy
import os
import hashlib
from importlib import resources
import subprocess

from jens import templates

# TODO: Consider generating a single object in Blender instead of a new collection. 
# TODO: Refactor into several functions.
# TODO: Output directory should be generated somewhere. Perhaps it should be named temp or similar. 
# Hmm... should I create a constants folder where all constants are stored? 
""" To get TikZ to work we should do the following:
    - Use latex to produce .dvi file (not pdf!)
    - Use dvisvgm -n file.dvi --libgs=/usr/local/lib/libgs.dylib 
    to create .svg file. 
    - Use inkscape to make all the strokes into paths. 
    inkscape --actions="select-all;object-to-path;FileSave;FileClose" --batch-process file.svg" 
    Note: There is a problem to solve here. If the LaTeX contains both 
    math and tikz there might be lines that are problematics in the tikz figure. 
    These are created as lines with thick strokes and they yield only a thin
    line when imported to Blender. 
    In the gui we can choose all objects that have an undefined stroke and then choose object-to-path in the object menu. 
    Then we can choose all objects which have a defined color (black) and then choose stroke-to-path. 
    I need to figure out how to do this from the command line. 
"""

""" Contains functions for dealing with text. 
Currently it has just one function which creates a set of curves which draws text generated by LaTeX."""

""" Generate hash from latex file and name the collection after this"""

blender_file_path = bpy.path.abspath('//')

def generate_text_collection(texcode, collection_to_move_to=None):
    """Generates a new collection with text objects from a string with LaTeX-commands or text.
    
    This takes a string with LaTeX-code and generates a new collection with curve objects 
    that draws the resulting text/equations. 
    The name of the resulting collection is made by a hash of the LaTeX-file. 
    
    Args:
        texcode: A string containing valid LaTeX code. Use r to make the string raw if it 
            contains e.g. backslash. 
        collection_to_move_to: A collection where all objects are moved. 
    """
    
    """
    1. Create directory if needed (perhaps move somewhere else, e.g. when scene is created). 
    2. Generate hash for name. 
    3. Create LaTeX-file frome template and string. 
    4. Run LaTe to create a dvi-file. 
    5. Use dvisvgm to reate svg-file. 
    6. Import the svg-file to Blender. 
    
    Probably I should write a custom parser for 6. 
    
    Overall function
    latex_output_path = init_directory()
    dvi_file = gen_dvi(name, latex_output_path) (should gen latex_source and then the dvi-file)
    svg_file = gen_svg(dvi_file) (should gen the svg-file from the dvi)
    import_svg(svg_file)
     
    """
    latex_output_path = init_directory()
    name = gen_hash(texcode)
    gen_latex_source(texcode, latex_output_path, name) 
    # Move next two things to separate functions. 
    latex_file_command = ' '.join(['latex',
                        '-halt-on-error',
                        '-output-directory', 
                        '"' + latex_output_path + '"',
                        '"' + latex_output_path + name + '.tex' + '"', 
                        ])
                        #' > /dev/null']) # Use this to ignore latex error. 
    svg_command = ' '.join(
            ['dvisvgm',
             '-n', # No fonts!
             '--bbox=preview',
             '--libgs=/usr/local/lib/libgs.dylib',
             '--output=' + '"' + latex_output_path + name + '.svg' + '"',
             '"' + latex_output_path + name + '.dvi' '"',
             ]
            )
    print('----------Generating LaTeX.------------')
    os.system(latex_file_command)
    # os.system(svg_command)
    proc = subprocess.Popen([svg_command], stdout=subprocess.PIPE, shell=True)
    (out, err) = proc.communicate()
    print(out) # Use this to parse baseline??? 
    print('----------Generating svg.----------')
    svg_file_path = latex_output_path + name + '.svg'
    # print('svg_file_path = ' + svg_file_path)
    bpy.ops.import_curve.svg(filepath=svg_file_path)
    coll_name = name + '.svg'
    for object in bpy.data.collections[coll_name].objects: 
        object.name = name
        object.scale = (100,100,100)
    return bpy.data.collections[coll_name].objects
    
def init_directory():
    """ Creates the directory to store the output files. 
    These files can in general be discarded afterwards."""
    latex_output_path = blender_file_path + 'latex-file/'
    print('Make directory')
    os.system("mkdir -p " + '"' + latex_output_path + '"')
    os.system('echo ' + latex_output_path)
    # Add check and output logfile for latex in case it failes
    # See manimlib/utils/tex_file_writing.py line 66-72. 

    return latex_output_path

def gen_latex_source(texcode, directory, name):
    template = resources.read_text(templates, 'tex_template.tex')
    filedata = template.replace('YOURTEXTHERE', texcode)
    with open(directory + name + '.tex', 'w') as file:
        file.write(filedata)
    # This should return the path. 

def gen_hash(expression): #, template_tex_file_body):
    """Generates a hash based on the expression. 
    
    This is used to give a unique name."""
    # TODO: Consider moving this to a general utility module. 
    
    id_str = str(expression) # + template_tex_file_body)
    hasher = hashlib.sha256()
    hasher.update(id_str.encode())
    # Truncating at 16 bytes for cleanliness
    return hasher.hexdigest()[:8]

def gen_dvi(name, latex_output_path):
        pass
    
def gen_svg(dvi_file): 
        pass
